import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import * as ethers from "ethers";
import {
  tokenNames,
  craftAddresses,
  spilloverExtractors,
} from "../functions/scholarLookup";
import { Coinpath, CoinpathRes, Recipient, SmartContractCall } from "../types";
import { addressDictionary } from "../addressDictionary";
import { recipientName } from "../helpers";
import { GotchiverseStats, gotchiverseUrl } from "../functions/gotchiAssets";

import request from "graphql-request";
import { gotchiverseSinks } from "../queries";

interface SinksRes {
  installationTypes: InstallationType[];
  tileTypes: TileType[];
  bounceGateEvents: BounceGateEvent[];
}

interface BounceGateEvent {
  id: string;
  priority: string;
}

interface InstallationType {
  id: string;
  amount: string;
  name: string;
  alchemicaCost: string[];
}
interface TileType {
  id: string;
  amount: string;
  alchemicaCost: string[];
  name: string;
}

const Home: NextPage = () => {
  const [installations, setInstallations] = useState<InstallationType[]>();

  const [tiles, setTiles] = useState<TileType[]>();
  const [bounceGateEvents, setBounceGateEvents] = useState<BounceGateEvent[]>();

  const [insSinks, setInsSinks] = useState<number>();
  const [tileSinks, setTileSinks] = useState<number>();
  const [bgSinks, setBgSinks] = useState<number>();

  useEffect(() => {
    fetchSinks();
  }, []);

  const fetchSinks = async () => {
    const res: SinksRes = await request(gotchiverseUrl, gotchiverseSinks);

    //sort
    const installationTypes: InstallationType[] = res.installationTypes.sort(
      (a, b) => Number(a.id) - Number(b.id)
    );

    const bounceGates: BounceGateEvent[] = res.bounceGateEvents.sort(
      (a, b) => Number(b.priority) - Number(a.priority)
    );
    setBounceGateEvents(bounceGates);

    let fudTotal = 0;

    installationTypes.forEach((type) => {
      let fudIns =
        Number(ethers.utils.formatEther(type.alchemicaCost[0])) *
        Number(type.amount);
      let fomoIns =
        Number(ethers.utils.formatEther(type.alchemicaCost[1])) *
        Number(type.amount);
      let alphaIns =
        Number(ethers.utils.formatEther(type.alchemicaCost[2])) *
        Number(type.amount);
      let kekIns =
        Number(ethers.utils.formatEther(type.alchemicaCost[3])) *
        Number(type.amount);

      fudTotal += fudIns + fomoIns * 2 + alphaIns * 4 + kekIns * 10;

      console.log("total:", fudTotal);
    });

    setInstallations(installationTypes);
    setInsSinks(fudTotal);

    let fudTotalTile = 0;

    const tileTypes: InstallationType[] = res.tileTypes.sort(
      (a, b) => Number(a.id) - Number(b.id)
    );

    tileTypes.forEach((type) => {
      let fudTile =
        Number(ethers.utils.formatEther(type.alchemicaCost[0])) *
        Number(type.amount);
      let fomoTile =
        Number(ethers.utils.formatEther(type.alchemicaCost[1])) *
        Number(type.amount);
      let alphaTile =
        Number(ethers.utils.formatEther(type.alchemicaCost[2])) *
        Number(type.amount);
      let kekTile =
        Number(ethers.utils.formatEther(type.alchemicaCost[3])) *
        Number(type.amount);

      fudTotalTile += fudTile + fomoTile * 2 + alphaTile * 4 + kekTile * 10;
    });

    setTileSinks(fudTotalTile);

    setTiles(tileTypes);

    let bounceGateFud = 0;
    res.bounceGateEvents.forEach((event) => {
      bounceGateFud += Number(event.priority) / 1000;
    });

    setBgSinks(bounceGateFud);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Gotchiverse Sources and Sinks</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Gotchiverse Sources and Sinks</h1>
      </main>

      <h2>Totals</h2>

      <div
        style={{
          display: "flex",
          flexDirection: "row",
          width: "100%",
          justifyContent: "center",
        }}
      >
        <div>
          <h2>Installations</h2>

          <h4>{insSinks} FUD total</h4>

          <ul>
            {installations &&
              installations.map((val) => {
                return (
                  <li>
                    {val.name}: {val.amount}
                    <ul>
                      {val.alchemicaCost.map((alc) => {
                        return (
                          <div>
                            {Number(ethers.utils.formatEther(alc)) *
                              Number(val.amount)}{" "}
                          </div>
                        );
                      })}
                    </ul>
                  </li>
                );
              })}
          </ul>
        </div>

        <div>
          <h2>Tiles</h2>

          <h4>{tileSinks} FUD total</h4>

          <ul>
            {tiles &&
              tiles.map((val) => {
                return (
                  <li>
                    {" "}
                    {val.name}: {val.amount}
                  </li>
                );
              })}
          </ul>
        </div>

        <div>
          <h2>Bounce Gate Events</h2>

          <h4>Total FUD spent: {bgSinks?.toFixed()}</h4>

          <ul>
            {bounceGateEvents &&
              bounceGateEvents.map((val) => {
                if (val.priority === "0") return <div></div>;

                return (
                  <li>
                    {" "}
                    {val.id}: {Number(val.priority) / 1000} FUD
                  </li>
                );
              })}
          </ul>
        </div>
      </div>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank noreferrer"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
