import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import * as ethers from "ethers";

import { gotchiverseUrl } from "../functions/gotchiAssets";

import request from "graphql-request";
import { gotchiverseSources } from "../queries";

interface SourcesRes {
  channelAlchemicaEvents: ChannelAlchemicaEvent[];
  alc1: AlchemicaClaimedEvent[];
  alc2: AlchemicaClaimedEvent[];
  alc3: AlchemicaClaimedEvent[];
  alc4: AlchemicaClaimedEvent[];
  alc5: AlchemicaClaimedEvent[];
}

interface ChannelAlchemicaEvent {
  id: string;
  parcel: {
    id: string;
    owner: string;
  };
  spilloverRate: string;
  alchemica: string[];
}

interface AlchemicaClaimedEvent {
  id: string;
  alchemicaType: string;
  parcel: {
    id: string;
    owner: string;
  };
  amount: string;
  spilloverRate: string;
  spilloverRadius: string;
}

interface AddressObject {
  [id: string]: AddressStats;
}

interface AddressStats {
  count: number;
}

const idToName = {
  "0": "FUD",
  "1": "FOMO",
  "2": "ALPHA",
  "3": "KEK",
};

const Home: NextPage = () => {
  const [channelEvents, setChannelEvents] = useState<ChannelAlchemicaEvent[]>();

  const [alchemicaClaimEvents, setAlchemicaClaimEvents] =
    useState<AlchemicaClaimedEvent[]>();

  const [channelingFudTotal, setChannelingFudTotal] = useState<number>();

  const [alchemicaClaimFudTotal, setAlchemicaClaimFudTotal] =
    useState<number>();

  const [addressesFinal, setAddressesFinal] =
    useState<[string, AddressStats][]>();

  const alchemicaType = "0";
  const timeFrame = 3600;

  useEffect(() => {
    fetchSources();
  }, []);

  const fetchSources = async () => {
    const lastDay = (Date.now() / 1000 - timeFrame).toFixed();

    const res: SourcesRes = await request(
      gotchiverseUrl,
      gotchiverseSources(lastDay.toString(), alchemicaType)
    );

    console.log("res:", res);

    let addresses: AddressObject = {};

    setChannelEvents(res.channelAlchemicaEvents);

    let fudTotal = 0;

    res.channelAlchemicaEvents.forEach((type) => {
      if (addresses[type.parcel.owner]) {
        addresses[type.parcel.owner].count =
          addresses[type.parcel.owner].count + 1;
      } else {
        addresses[type.parcel.owner] = {
          count: 1,
        };
      }

      let fudIns = Number(ethers.utils.formatEther(type.alchemica[0]));
      let fomoIns = Number(ethers.utils.formatEther(type.alchemica[1]));
      let alphaIns = Number(ethers.utils.formatEther(type.alchemica[2]));
      let kekIns = Number(ethers.utils.formatEther(type.alchemica[3]));

      fudTotal += fudIns + fomoIns * 2 + alphaIns * 4 + kekIns * 10;
    });

    let addressesSorted = Object.entries(addresses).sort(
      (a, b) => b[1].count - a[1].count
    );

    setAddressesFinal(addressesSorted);

    setChannelingFudTotal(fudTotal);

    let claimFudTotal = 0;

    const allAlchemicaEvents = res.alc1
      .concat(res.alc2)
      .concat(res.alc3)
      .concat(res.alc4)
      .concat(res.alc5);

    setAlchemicaClaimEvents(allAlchemicaEvents);

    allAlchemicaEvents.forEach((type) => {
      let amount = Number(ethers.utils.formatEther(type.amount));
      const spilloverPerc = 1 - Number(type.spilloverRate) / 10000;

      let withSpillover = amount * spilloverPerc;

      // console.log("rate:", amount, spilloverPerc, withSpillover);
      /* 
      if (type.alchemicaType === "0") {
        amount = amount;
      } else if (type.alchemicaType === "1") {
        // amount *= 2;
      } else if (type.alchemicaType === "2") {
        // amount *= 4;
      } else {
        // amount *= 10;
      } */

      claimFudTotal += withSpillover;
    });

    setAlchemicaClaimFudTotal(claimFudTotal);

    //sort
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Gotchiverse Sources and Sinks</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Gotchiverse Sources and Sinks</h1>
      </main>

      <div
        style={{
          display: "flex",
          flexDirection: "row",
          width: "100%",
          justifyContent: "center",
        }}
      >
        <div>
          <h2>Alchemical Channeling (Last Hour)</h2>

          <h4>{channelEvents?.length} events found</h4>

          <h4>{channelingFudTotal?.toFixed()} FUD total generated</h4>

          {addressesFinal &&
            addressesFinal.map((val) => {
              return (
                <div>
                  {val[0]}: {val[1].count}
                </div>
              );
            })}

          {/*   <ul>
            {channelEvents &&
              channelEvents.map((val) => {
                return (
                  <li>
                    <div>
                      {val.parcel.id}: {val.parcel.owner}
                    </div>

                    <ul>
                      {val.alchemica.map((val) => {
                        return <li>{ethers.utils.formatEther(val)}</li>;
                      })}
                    </ul>
                  </li>
                );
              })}
          </ul> */}
        </div>

        <div>
          <h2>Harvesting (Last 24hrs)</h2>

          <h4>{alchemicaClaimEvents?.length} events found</h4>

          <h4>
            {alchemicaClaimFudTotal?.toFixed()} {idToName[alchemicaType]} total
            generated
          </h4>

          {/*    <ul>
            {alchemicaClaimEvents &&
              alchemicaClaimEvents.map((val) => {
                if (val.amount === "0") return <div></div>;

                return (
                  <li>
                    <div>
                      {val.parcel.id}: {val.parcel.owner}
                    </div>
                    {val.alchemicaType}:{" "}
                    {Number(ethers.utils.formatEther(val.amount)).toFixed(2)}
                  </li>
                );
              })}
          </ul> */}
        </div>
      </div>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank noreferrer"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
